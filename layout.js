import React, { useState, useRef, useLayoutEffect } from 'react'
import { dagConnect } from 'd3-dag'
import styled from 'styled-components'
const d3 = require('d3')

import zherebko from './zherebko'

const exampleDAG = [
	['Eve', 'Cain'],
	['Eve', 'Seth'],
	// ['Seth', 'Cain'],
	// ['Seth', 'Noam'],
	// ['Eve', 'Abel'],
	// ['Eve', 'Awan'],
]

function RenderNodes(props) {
	const { width, height, nodeRadius, layout, dag } = props
	const svgRef = useRef(null)
	const renderGraph = useLayoutEffect(() => {
		const svgNode = svgRef.current
		const nodeRadius = 20
		const svgSelection = d3.select(svgNode)
		const defs = svgSelection.append('defs') // For gradients
		// Use computed layout
		layout(dag)
		const steps = dag.size()
		const interp = d3.interpolateRainbow
		const colorMap = {}
		dag.each((node, i) => {
			colorMap[node.id] = interp(i / steps)
		})
		// How to draw edges
		const line = d3
			.line()
			.curve(d3.curveMonotoneX)
			.x(d => d.y)
			.y(d => d.x)

		console.log('DAG SHAPE', dag.links())
		// Plot edges
		svgSelection
			.append('g')
			.selectAll('path')
			.data(dag.links())
			.enter()
			.append('path')
			.attr('d', ({ data }) => line(data.points))
			.attr('fill', 'none')
			.attr('stroke-width', 3)
			.attr('stroke', ({ source, target }) => {
				const gradId = `${source.id}-${target.id}`
				const grad = defs
					.append('linearGradient')
					.attr('id', gradId)
					.attr('gradientUnits', 'userSpaceOnUse')
					.attr('x1', source.y)
					.attr('x2', target.y)
					.attr('y1', source.x)
					.attr('y2', target.x)
				grad.append('stop')
					.attr('offset', '0%')
					.attr('stop-color', colorMap[source.id])
				grad.append('stop')
					.attr('offset', '100%')
					.attr('stop-color', colorMap[target.id])
				return `url(#${gradId})`
			})
		// Select nodes
		const nodes = svgSelection
			.append('g')
			.selectAll('g')
			.data(dag.descendants())
			.enter()
			.append('g')
			.attr('transform', ({ x, y }) => `translate(${y}, ${x})`)
		// Plot node circles
		nodes
			.append('circle')
			.attr('r', 20)
			.attr('fill', n => colorMap[n.id])
		// Add text to nodes
		nodes
			.append('text')
			.text(d => d.id)
			.attr('font-weight', 'bold')
			.attr('font-family', 'sans-serif')
			.attr('text-anchor', 'middle')
			.attr('alignment-baseline', 'middle')
			.attr('fill', 'white')
		return subscription => {
			// Clean up the subscription
			// subscription.unsubscribe()
		}
	})
	return (
		<svg
			width={width}
			height={height}
			ref={svgRef}
			viewbox={`${-nodeRadius} ${-nodeRadius} ${width +
				2 * nodeRadius} ${height + 2 * nodeRadius}`}
		/>
	)
}

function Layout() {
	const width = 400
	const height = 400
	const nodeRadius = 10
	// dispatchGetCell

	const dag = dagConnect()(exampleDAG)
	const layout = zherebko().size([height, width])
	return <RenderNodes {...{ width, height, nodeRadius, layout, dag }} />
}

const NodeLayoutWrapper = styled.div`
	display: flex;
	flex-wrap: wrap;
	> div {
		transition-property: transform;
		transition-duration: 0.5s;
		transition-timing-function: ease-in-out;
		background: black;
		flex-grow: 1;
		transform: ${({ isNodeView }) =>
			!isNodeView
				? 'scale(1) translateX(0px)'
				: 'scale(0.2) translateX(1000px)'};
	}
`

function NotebookLayoutComponent() {
	const [isNodeView, setIsNodeView] = useState()
	return (
		<div>
			<button onClick={() => setIsNodeView(!isNodeView)}>
				Toggle Shrink: {(!isNodeView).toString()}
			</button>
			<NodeLayoutWrapper isNodeView={isNodeView}>
				{[
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					1,
					2,
					5,
					3,
					2,
					5,
					6,
					4,
					3,
					2,
					2,
				].map(x => (
					<div
						style={{
							borderRadius: '2px',
							marginBottom: '1rem',
							height: '20px',
							marginRight: '0.2rem',
							width: `${x}%`,
						}}
					/>
				))}
			</NodeLayoutWrapper>
		</div>
	)
}

export const NotebookLayout = React.memo(NotebookLayoutComponent)

export default React.memo(NotebookLayout)
